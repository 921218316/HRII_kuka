/* Auto-generated by genmsg_cpp for file /home/rodrigo/Dropbox/fuerte_workspace/sandbox/beginner_tutorials/msg/t2r.msg */
#ifndef BEGINNER_TUTORIALS_MESSAGE_T2R_H
#define BEGINNER_TUTORIALS_MESSAGE_T2R_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace beginner_tutorials
{
template <class ContainerAllocator>
struct t2r_ {
  typedef t2r_<ContainerAllocator> Type;

  t2r_()
  : start_point()
  , centroid()
  , end_point()
  , covariance()
  {
    start_point.assign(0.0);
    centroid.assign(0.0);
    end_point.assign(0.0);
    covariance.assign(0.0);
  }

  t2r_(const ContainerAllocator& _alloc)
  : start_point()
  , centroid()
  , end_point()
  , covariance()
  {
    start_point.assign(0.0);
    centroid.assign(0.0);
    end_point.assign(0.0);
    covariance.assign(0.0);
  }

  typedef boost::array<double, 3>  _start_point_type;
  boost::array<double, 3>  start_point;

  typedef boost::array<double, 3>  _centroid_type;
  boost::array<double, 3>  centroid;

  typedef boost::array<double, 3>  _end_point_type;
  boost::array<double, 3>  end_point;

  typedef boost::array<double, 9>  _covariance_type;
  boost::array<double, 9>  covariance;


  typedef boost::shared_ptr< ::beginner_tutorials::t2r_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner_tutorials::t2r_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct t2r
typedef  ::beginner_tutorials::t2r_<std::allocator<void> > t2r;

typedef boost::shared_ptr< ::beginner_tutorials::t2r> t2rPtr;
typedef boost::shared_ptr< ::beginner_tutorials::t2r const> t2rConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::beginner_tutorials::t2r_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::beginner_tutorials::t2r_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace beginner_tutorials

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::beginner_tutorials::t2r_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::beginner_tutorials::t2r_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::beginner_tutorials::t2r_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b4f384a909b5fb5204ee72ff18ae81e4";
  }

  static const char* value(const  ::beginner_tutorials::t2r_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb4f384a909b5fb52ULL;
  static const uint64_t static_value2 = 0x04ee72ff18ae81e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner_tutorials::t2r_<ContainerAllocator> > {
  static const char* value() 
  {
    return "beginner_tutorials/t2r";
  }

  static const char* value(const  ::beginner_tutorials::t2r_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::beginner_tutorials::t2r_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[3] start_point\n\
float64[3] centroid\n\
float64[3] end_point\n\
float64[9] covariance\n\
\n\
";
  }

  static const char* value(const  ::beginner_tutorials::t2r_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::beginner_tutorials::t2r_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::beginner_tutorials::t2r_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.start_point);
    stream.next(m.centroid);
    stream.next(m.end_point);
    stream.next(m.covariance);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct t2r_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beginner_tutorials::t2r_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::beginner_tutorials::t2r_<ContainerAllocator> & v) 
  {
    s << indent << "start_point[]" << std::endl;
    for (size_t i = 0; i < v.start_point.size(); ++i)
    {
      s << indent << "  start_point[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.start_point[i]);
    }
    s << indent << "centroid[]" << std::endl;
    for (size_t i = 0; i < v.centroid.size(); ++i)
    {
      s << indent << "  centroid[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.centroid[i]);
    }
    s << indent << "end_point[]" << std::endl;
    for (size_t i = 0; i < v.end_point.size(); ++i)
    {
      s << indent << "  end_point[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.end_point[i]);
    }
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariance[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // BEGINNER_TUTORIALS_MESSAGE_T2R_H

